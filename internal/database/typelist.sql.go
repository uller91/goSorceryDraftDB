// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: typelist.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createType = `-- name: CreateType :one
INSERT INTO typelist (id, created_at, updated_at, name)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name
`

type CreateTypeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateType(ctx context.Context, arg CreateTypeParams) (Typelist, error) {
	row := q.db.QueryRowContext(ctx, createType,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i Typelist
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getTypes = `-- name: GetTypes :many
SELECT id, created_at, updated_at, name FROM typelist
`

func (q *Queries) GetTypes(ctx context.Context) ([]Typelist, error) {
	rows, err := q.db.QueryContext(ctx, getTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Typelist
	for rows.Next() {
		var i Typelist
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const typelistReset = `-- name: TypelistReset :exec
DELETE FROM typelist
`

func (q *Queries) TypelistReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, typelistReset)
	return err
}
